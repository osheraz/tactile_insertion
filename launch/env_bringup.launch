<?xml version="1.0" ?>
<launch>

  <!-- usb ports. in order to check which is which "ls /dev/tty" then tabs -->
  <arg name="usb_port_arm" default="/dev/ttyUSB0" />
  <arg name="usb_port_ft" default="ttyUSB2" />
  <arg name="usb_port_hand" default="/dev/ttyUSB1" />

  <arg name="with_openhand" default="false"/>
  <arg name="with_ft" default="false"/>
  <arg name="with_arm" default="true"/>
  <arg name="with_tactile" default="false"/>
  <arg name="with_ext_camera" default="false"/>

  <!-- Not used right now -->
  <arg name="with_gripper" default="false"/>
  <arg name="position" default="true"/>
  <arg name="effort" default="false"/>

  <group if="$(arg with_tactile)">
    <node name="allsight2" pkg="tactile_insertion" type="tactile_image_publisher.py" output="screen" clear_params="true">
       <param name="dev_name" value="2" />
       </node>
    <node name="allsight4" pkg="tactile_insertion" type="tactile_image_publisher.py" output="screen" clear_params="true">
       <param name="dev_name" value="4" />
       </node>
     <node name="allsight6" pkg="tactile_insertion" type="tactile_image_publisher.py" output="screen" clear_params="true">
       <param name="dev_name" value="6" />
       </node>
     </group>

  <!-- Setup tracking system -->
  <group if="$(arg with_ext_camera)">
    <include file="$(find tactile_insertion)/launch/continuous_detection.launch"/>
  </group>


<group if="$(arg with_arm)">

        <include file="$(find open_manipulator_p_hw)/launch/open_manipulator_p_control.launch">
          <arg name="usb_port" value="$(arg usb_port_arm)"/>
          <arg name="with_gripper" value="$(arg with_gripper)"/>
          <arg name="with_openhand" value="$(arg with_openhand)"/>
          <arg name="with_ft" value="$(arg with_ft)"/>
          <arg name="with_camera" value="true"/>
        </include>

      <!-- controller utils -->
  <include file="$(find open_manipulator_p_hw)/launch/controller_utils.launch"/>

   <!-- joint_trajectory_controller - In gazebo they use effort interface for the gripper-->
    <rosparam file="$(find open_manipulator_p_controllers)/config/joint_trajectory_controller.yaml" command="load"/>

    <node name="arm_controller_spawner" pkg="controller_manager" type="controller_manager" respawn="false" output="screen" args="spawn arm_controller"/>
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />

          <!-- startup move_group related  -->
  <group unless="$(arg with_gripper)">
      <group unless="$(arg with_openhand)">
          <group unless="$(arg with_ft)">
            <include file="$(find open_manipulator_p_moveit_config)/launch/move_group.launch"/>
            <include file="$(find open_manipulator_p_moveit_config)/launch/moveit_rviz.launch"/>
          </group>
          <group if="$(arg with_ft)">
            <include file="$(find open_manipulator_p_with_ft_moveit_config)/launch/move_group.launch"/>
            <include file="$(find open_manipulator_p_with_ft_moveit_config)/launch/moveit_rviz.launch"/>
          </group>
      </group>
  </group>

  <group if="$(arg with_openhand)">
        <group if="$(arg with_ft)">
            <include file="$(find open_manipulator_p_with_openhand_and_ft_moveit_config)/launch/move_group.launch"/>
            <include file="$(find open_manipulator_p_with_openhand_and_ft_moveit_config)/launch/moveit_rviz.launch"/>
        </group>
  </group>

<!--    <node pkg="rosservice" type="rosservice" name="set_logger_level_mg" args="call /move_group/set_logger_level '{logger: 'ros', level: 'error'}'"/>-->
<!--    <node pkg="rosservice" type="rosservice" name="set_logger_level_rsp" args="call /robot_state_publisher/set_logger_level '{logger: 'ros', level: 'error'}'"/>-->


</group>

<!-- Load openhand controllers for real hand -->
  <group if="$(arg with_openhand)">
      <include file="$(find hand_control)/launch/run.launch">
        <arg name="num_fingers" value="3"/>
        <arg name="usb_port_hand" value="$(arg usb_port_hand)"/>
      </include>
       <node  name="joint_state_publisher" pkg="tactile_insertion" type="custom_joint_state_publisher.py" output="screen" respawn="false"/>
    </group>

    <!-- Load Robotiq FT sensor  -->
    <group if="$(arg with_ft)">
      <node name="rq_stream_sensor" pkg="robotiq_force_torque_sensor" type="rq_stream_sensor_custom" respawn="false" output="screen" launch-prefix="bash -c 'sleep 10.0; $0 $@' "/>
      <node name="rq_sensor" pkg="robotiq_force_torque_sensor" type="rq_sensor_custom" respawn="false" output="screen">
                    <param name="serial_id" value="$(arg usb_port_ft)"/>
      </node>

          <node name="force_torque_filter_publisher" pkg="tactile_insertion" type="force_torque_filter_publisher.py" output="screen"  />
        <!-- Bias the F/T sensor at startup -->
      <node pkg="rosservice" type="rosservice" name="ft_sensor_biaser"  args="call --wait /robotiq_force_torque_sensor_acc &quot;command: 'SET_ZRO'&quot; " />
  </group>

<!--     <group if="$(arg with_ft)"> -->
<!--     <group if="$(arg with_arm)"> -->
<!--               <node name="stupid_force_regularized" pkg="tactile_insertion" type="stupid_force_regularized.py" output="screen"  /> -->
<!--     </group> -->
<!--     </group> -->


</launch>
